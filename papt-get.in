#!/usr/bin/perl

use 5.010;
use strict;
use warnings;

use Text::Wrap;
use Errno;
use Fcntl qw/ :flock /;
use Crypt::Digest qw/ digest_file_hex /;
use Number::Format qw/ :subs /;
use AptPkg::Config '$_config';
use Getopt::Long qw/ :config bundling require_order pass_through /;

my $apt_dir_archives = '';
my $apt_dir_downloads = '';

END {
	if (defined $apt_dir_downloads && length $apt_dir_downloads && opendir my $dh, $apt_dir_downloads) {
		while (readdir $dh) {
			unlink "$apt_dir_downloads/$_";
		}
		closedir $dh;
	}
}

require 'sys/ioctl.ph';

$0 =~ /^(?:.*\/)?([^\/]+)$/;

my $progname = $1;
my $verbose = 0;
my $parallel = 5;
my $confirmed = 0;
my $version = 0;
my $help = 0;

GetOptions(
	"p=i" => \$parallel,
	"parallel=i" => \$parallel,

	"v+" => \$verbose,
	"verbose+"  => \$verbose,

	"y" => \$confirmed,
	"yes" => \$confirmed,
	"assume-yes" => \$confirmed,

	"V" => \$version,
	"version" => \$version,

	"h" => \$help,
	"help" => \$help,
) or
	die "error in command line arguments";

if ($help) {
	print <<EOF;
Usage: $progname [options] [install|remove] packages...
   or: $progname [options] dist-upgrade
   or: $progname <apt-get command> [apt-get options]...
EOF
	print <<'EOF';

This utility allows to simultaneously download the packages required for updating the system.
This utility is a wrapper for apt-get.

Options:
  -y, --assume-yes      do not ask any questions;
  -p, --parallel=N      set the maximum number of parallel downloads;
  -v, --verbose         print a message for each action;
  -V, --version         print program version and exit;
  -h, --help            show this text and exit.

Report bugs to authors.

EOF
	exit;
}

if ($version) {
	print "$progname version ", '@VERSION@', "\n";
	print <<'EOF';
Written by Alexey Gladkov, Gleb Fotengauer-Malinovskiy.

Copyright (C) 2021  Alexey Gladkov <gladkov.alexey@gmail.com>
Copyright (C) 2021  Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit;
}

die "Opration required" if !@ARGV;

my $command = shift @ARGV;

if ($command =~ /^(install|remove)$/) {
	die "Package names required" if !@ARGV;
} elsif ($command =~ /^(dist-upgrade)$/) {
	;
} else {
	exec 'apt-get', $command, @ARGV;
}

$_config->init();
$apt_dir_archives = $_config->get("Dir::Cache::archives/d");
$apt_dir_downloads = "$apt_dir_archives/downloads";

if (! mkdir $apt_dir_downloads) {
	die "Unable to create downloads directory: $!" unless $!{EEXIST};
}

open my $dwn, "<", $apt_dir_downloads or
	die "Unable to open downloads directory: $!";

if (! flock $dwn, LOCK_EX|LOCK_NB) {
	say "Another process is already using downloads.";
	exit;
}

my $winsize = '';

ioctl STDOUT, &TIOCGWINSZ, $winsize or die "ioctl(TIOCGWINSZ): $!";
my ($rows, $cols, $xpixel, $ypixel) = unpack 'S4', $winsize;

$Text::Wrap::columns = $cols || 72;

my %info = (
	'extra-list'     => [],
	'install-list'   => [],
	'remove-list'    => [],
	'upgrade-list'   => [],
	'downgrade-list' => [],
	'keep-list'      => [],
	'hold-list'      => [],
	'essential-list' => [],
	'disk-size'      => "0B",
	'install'        => 0,
	'remove'         => 0,
	'upgrade'        => 0,
	'replace'        => 0,
	're-install'     => 0,
	'downgrade'      => 0,
	'total-size'     => 0,
	'missing-files'  => [],
);

say "Calculating changes...";

open my $fh, "-|", "apt-get", $command, "-o", "simple-output=yes", "-q=2", "--print-uris", @ARGV or
	die "Can't start apt-get: $!";

while (<$fh>) {
	SWITCH: {
		if (/^apt-get:((?:extra|install|remove|upgrade|downgrade|keep|hold|essential)-list):(.*)$/) {
			push @{$info{$1}}, split /\s+/, $2;
			last SWITCH;
		}
		if (/^apt-get:status:(install|remove|upgrade|replace|re-install|downgrade):(\d+)$/) {
			$info{$1} = $2;
			last SWITCH;
		}
		if (/^apt-get:status:(disk-size):(.*)$/) {
			$info{$1} = $2;
			last SWITCH;
		}

		/^'(?<url>[^']+)' (?<filename>\S+) (?<size>\d+) (?<hash>[A-Fa-f0-9]+)$/;

		last SWITCH if $+{'url'} =~ /^file:/;

		push @{$info{'missing-files'}}, {
				'url' => $+{'url'},
				'filename' => $+{'filename'},
				'size' => $+{'size'},
				'hash' => $+{'hash'}
		};

		$info{'total-size'} += $+{'size'};
	}
}
close $fh;

my $everything = 0;
foreach my $key (qw/ upgrade downgrade install re-install replace remove /) {
	$everything += $info{$key};
}

if ($everything == 0) {
	say "Nothing to do.";
	exit;
}

my %desc = (
	'downgrade-list' => "\nThe following packages will be DOWNGRADED:",
	'essential-list' => "\nWARNING: The following essential packages will be removed\nThis should NOT be done unless you know exactly what you are doing!",
	'extra-list'     => "\nThe following extra packages will be installed:",
	'hold-list'      => "\nThe following held packages will be changed:",
	'install-list'   => "\nThe following NEW packages will be installed:",
	'keep-list'      => "\nThe following packages have been kept back:",
	'remove-list'    => "\nThe following packages will be REMOVED:",
	'upgrade-list'   => "\nThe following packages will be upgraded:",
);

foreach my $key (qw/ downgrade-list essential-list extra-list hold-list install-list keep-list remove-list upgrade-list /) {
	next unless @{$info{$key}};
	say $desc{$key};
	say wrap "\t", "\t", join " ", @{$info{$key}};
}
say "";

my $summary = "Summary";

$summary .= ": $info{'upgrade'} upgraded, $info{'install'} newly installed";
$summary .= ", $info{'re-install'} re-installed" if $info{'re-install'};
$summary .= ", $info{'downgrade'} downgraded"    if $info{'downgrade'};
$summary .= ", $info{'replace'} replaced"        if $info{'replace'};
$summary .= ", $info{'remove'} removed"          if $info{'remove'};

say $summary;
say "";

say "Need to get ", format_bytes($info{'total-size'}), " of archives.";
say "After unpacking $info{'disk-size'} of additional disk space will be used.";

unless ($confirmed) {
	say "";

	print "Do you want to continue? [Y/n] ";
	my $answer = <STDIN>;
	chomp $answer;

	if (length $answer > 0 and lc $answer ne "y") {
		say "Abort.";
		exit;
	}
}

if (@{$info{'missing-files'}}) {
	say "";

	say "Downloading packages...";

	open $fh, "|-", "curl", "-#", "--parallel-immediate", "--parallel-max", "$parallel", "-Z", "-K", "-" or
		die "Can't start curl: $!";

	foreach my $missing (@{$info{'missing-files'}}) {
		$missing->{url} =~ s/^copy:/file:/;

		say $fh "url = $missing->{url}";
		say $fh "output = $apt_dir_downloads/$missing->{filename}";
	}
	close $fh;

	say "Check the checksums...";

	foreach my $missing (@{$info{'missing-files'}}) {
		my $algo = "MD5";

		SWITCH: {
			$_ = $missing->{hash};

			if (/^(MD5|MD5SUM):/i) {
				last SWITCH;
			}
			if (/^(SHA1|SHA256|SHA512):/i) {
				$algo = uc($1);
				last SWITCH;
			}
			if (/^([^:]+):.*/) {
				die "Unknown checksum algorithm: $1";
			}
		}

		my $digest_hex = digest_file_hex $algo, "$apt_dir_downloads/$missing->{filename}";

		die "$missing->{filename}: expected checksum \`$missing->{hash}', but got \`$digest_hex'"
			if $digest_hex ne $missing->{hash};

		rename "$apt_dir_downloads/$missing->{filename}", "$apt_dir_archives/$missing->{filename}" or
			die "Unable to move package from downloads directory: $!";
	}
}

say "Applying changes...";

if (open PTMX, '+<', '/dev/ptmx') {
	my $tmp = '';
	ioctl PTMX, &TIOCGPTN, $tmp or die "ioctl(TIOCGPTN): $!";

	my $pts = unpack 'i', $tmp;

	say "Using /dev/pts/$pts\n" if $verbose;

	# unlockpt
	my $unlock = pack 'i', 0;
	ioctl PTMX, &TIOCSPTLCK, $unlock or die "ioctl(TIOCSPTLCK): $!";

	my $pid = fork;
	die "Unable to fork: $!" unless defined $pid;

	if (!$pid) {
		open STDIN,  "+<", "/dev/pts/$pts" or die "Unable to re-open stdin to /dev/pts/$pts: $!";

		if (length $winsize > 0) {
			ioctl STDIN, &TIOCSWINSZ, $winsize or die "ioctl(TIOCSWINSZ): $!";
		}

		open STDOUT, '>&', STDIN  or die "can't dup stdin: $!" ;
		open STDERR, ">&", STDOUT or die "can't dup stdout: $!";

		exec "apt-get", $command, "-y", "-o", "simple-output=yes", @ARGV or
			die "Unable to exec apt-get";
	}

	my $rin = '';
	vec($rin, fileno(PTMX), 1) = 1;

	die "select: $!" if select(my $rout = $rin, undef, undef, undef) == -1;

	while (<PTMX>) {
		next if /^apt-get:/;
		print;
	}

	close PTMX;
	wait;
	exit $?;
}

exec "apt-get", $command, "-y", "-o", "simple-output=yes", @ARGV or
	die "Unable to exec apt-get";
