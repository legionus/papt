#!/usr/bin/perl

use 5.010;
use strict;
use warnings;

use Text::Wrap;
use Errno;
use Fcntl qw/ :flock /;
use Crypt::Digest qw/ digest_file_hex /;
use Number::Format qw/ :subs /;
use AptPkg::Config '$_config';
use Getopt::Long qw/ :config bundling require_order pass_through /;
use WWW::Curl::Easy;
use WWW::Curl::Multi;

my $apt_dir_archives = '';
my $apt_dir_downloads = '';

(our $progname = $0) =~ s#.*/##;
our $verbose = 0;
our $parallel = 5;
our $confirmed = 0;
our $download_method = 'libcurl';

our $winsize = '';

END {
	if (defined $apt_dir_downloads && length $apt_dir_downloads && opendir my $dh, $apt_dir_downloads) {
		while (readdir $dh) {
			unlink "$apt_dir_downloads/$_";
		}
		closedir $dh;
	}
}

sub display_help {
	print <<EOF;
Usage: $progname [options] [install|remove] packages...
   or: $progname [options] dist-upgrade
   or: $progname <apt-get command> [apt-get options]...
   or: $progname (search|show|showpkg|policy|depends|whatdepends) [apt-cache options]...
   or: $progname mark <apt-mark command> [apt-mark options]...
EOF
	print <<'EOF';

This utility allows to simultaneously download the packages required for updating the system.
This utility is a wrapper for apt-get, apt-cache and apt-mark.

Options:
  --download-method=METHOD   chooses the download method (curl or libcurl);
  -y, --assume-yes           do not ask any questions;
  -p, --parallel=N           set the maximum number of parallel downloads;
  -v, --verbose              print a message for each action;
  -V, --version              print program version and exit;
  -h, --help                 show this text and exit.

Report bugs to authors.

EOF
	exit;
}

sub display_version {
	print "$progname version ", '@VERSION@', "\n";
	print <<'EOF';
Written by Alexey Gladkov, Gleb Fotengauer-Malinovskiy.

Copyright (C) 2021  Alexey Gladkov <gladkov.alexey@gmail.com>
Copyright (C) 2021  Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit;
}


sub download_libcurl {
	my ($files) = @_;

	my @missing_by_size = reverse sort { $files->{$a}->{size} <=> $files->{$b}->{size} } keys %$files;

	my $curlm = WWW::Curl::Multi->new;

	my %active;
	my $queue = 0;

	while (@missing_by_size || $queue > 0) {
		while (@missing_by_size && $queue < $parallel) {
			my $num = shift @missing_by_size;
			my $url =  $files->{$num}->{url};
			my $filename = "$apt_dir_downloads/$files->{$num}->{name}";

			say "> Download: $url" if $verbose;

			open my $fh, '>', $filename or
				die "Can't open: $filename: $!";
			binmode $fh;

			my $curl = WWW::Curl::Easy->new;

			$curl->setopt(CURLOPT_PRIVATE, $num + 1);
			$curl->setopt(CURLOPT_MAXCONNECTS, $parallel);
			$curl->setopt(CURLOPT_URL, $url);
			$curl->setopt(CURLOPT_FILE, $fh);

			$curlm->add_handle($curl);

			$active{$num} = {
				'out'  => $fh,
				'curl' => $curl,
				'url'  => $url,
			};

			$queue++;
		}

		$curlm->perform;

		while (my ($id, $value) = $curlm->info_read) {
			$id--;

			say "* Received: $active{$id}->{url}";

			close $active{$id}->{out};
			delete $active{$id}->{curl};
			delete $active{$id};

			$queue--;
		}
	}
}

sub download_curl {
	my ($files) = @_;

	my @missing_by_size = reverse sort { $files->{$a}->{size} <=> $files->{$b}->{size} } keys %$files;

	open my $fh, "|-", "curl", "-#", "--parallel-immediate", "--parallel-max", "$parallel", "-Z", "-K", "-" or
		die "Can't start curl: $!";

	while (my ($id, $meta) = each %$files) {
		say $fh "url = $meta->{url}";
		say $fh "output = $apt_dir_downloads/$meta->{name}";
	}
	close $fh;
}

sub download {
	$_ = $download_method;

	SWITCH: {
		if (/^libcurl$/) {
			download_libcurl @_;
			last SWITCH;
		}
		if (/^curl$/) {
			download_curl @_;
			last SWITCH;
		}
		die "unknown download method: $_";
	}
}

sub checksums {
	my ($files) = @_;

	while (my ($id, $meta) = each %$files) {
		my $algo = "MD5";

		SWITCH: {
			$_ = $meta->{hash};

			if (/^(MD5|MD5SUM):/i) {
				last SWITCH;
			}
			if (/^(SHA1|SHA256|SHA512):/i) {
				$algo = uc($1);
				last SWITCH;
			}
			if (/^([^:]+):.*/) {
				die "Unknown checksum algorithm: $1";
			}
		}

		my $digest_hex = digest_file_hex $algo, "$apt_dir_downloads/$meta->{name}";

		die "$meta->{name}: expected checksum \`$_', but got \`$digest_hex'"
			if $digest_hex ne $_;

		rename "$apt_dir_downloads/$meta->{name}", "$apt_dir_archives/$meta->{name}" or
			die "Unable to move package from downloads directory: $!";
	}
}

sub confirmation {
	return if $confirmed;
	say "";

	print "Do you want to continue? [Y/n] ";
	my $answer = <STDIN>;
	chomp $answer;

	if (length $answer > 0 and lc $answer ne "y") {
		say "Abort.";
		exit;
	}
}

sub display_lists {
	my ($info) = @_;

	my %desc = (
		'downgrade-list' => "\nThe following packages will be DOWNGRADED:",
		'essential-list' => "\nWARNING: The following essential packages will be removed\nThis should NOT be done unless you know exactly what you are doing!",
		'extra-list'     => "\nThe following extra packages will be installed:",
		'hold-list'      => "\nThe following held packages will be changed:",
		'install-list'   => "\nThe following NEW packages will be installed:",
		'keep-list'      => "\nThe following packages have been kept back:",
		'remove-list'    => "\nThe following packages will be REMOVED:",
		'upgrade-list'   => "\nThe following packages will be upgraded:",
	);

	foreach my $key (qw/ downgrade-list essential-list extra-list hold-list install-list keep-list remove-list upgrade-list /) {
		next unless @{$info->{$key}};
		say $desc{$key};
		say wrap "\t", "\t", join " ", @{$info->{$key}};
	}
	say "";
}

sub display_summary {
	my ($info) = @_;

	my $summary = "Summary";

	$summary .= ": $info->{'upgrade'} upgraded, $info->{'install'} newly installed";
	$summary .= ", $info->{'re-install'} re-installed" if $info->{'re-install'};
	$summary .= ", $info->{'downgrade'} downgraded"    if $info->{'downgrade'};
	$summary .= ", $info->{'replace'} replaced"        if $info->{'replace'};
	$summary .= ", $info->{'remove'} removed"          if $info->{'remove'};

	say $summary;
	say "";

	say "Need to get ", format_bytes($info->{'total-size'}), " of archives.";
	say "After unpacking $info->{'disk-size'} of additional disk space will be used.";
}

sub exec_apt_get {
	unless (open PTMX, '+<', '/dev/ptmx') {
		exec "apt-get", @_ or die "Unable to exec apt-get";
	}

	my $tmp = '';
	ioctl PTMX, &TIOCGPTN, $tmp or die "ioctl(TIOCGPTN): $!";

	my $pts = unpack 'i', $tmp;

	say "Using /dev/pts/$pts\n" if $verbose;

	# unlockpt
	my $unlock = pack 'i', 0;
	ioctl PTMX, &TIOCSPTLCK, $unlock or die "ioctl(TIOCSPTLCK): $!";

	my $pid = fork;
	die "Unable to fork: $!" unless defined $pid;

	if (!$pid) {
		open STDIN,  "+<", "/dev/pts/$pts" or die "Unable to re-open stdin to /dev/pts/$pts: $!";

		if (length $winsize > 0) {
			ioctl STDIN, &TIOCSWINSZ, $winsize or die "ioctl(TIOCSWINSZ): $!";
		}

		open STDOUT, '>&', STDIN  or die "can't dup stdin: $!" ;
		open STDERR, ">&", STDOUT or die "can't dup stdout: $!";

		exec "apt-get", @_ or die "Unable to exec apt-get";
	}

	my $rin = '';
	vec($rin, fileno(PTMX), 1) = 1;

	die "select: $!" if select(my $rout = $rin, undef, undef, undef) == -1;

	while (<PTMX>) {
		next if /^apt-get:/;
		print;
	}

	close PTMX;
	wait;
	exit $?;
}

require 'sys/ioctl.ph';

my $version = 0;

GetOptions(
	"p=i" => \$parallel,
	"parallel=i" => \$parallel,

	"download-method=s" => \$download_method,

	"v+" => \$verbose,
	"verbose+"  => \$verbose,

	"y" => \$confirmed,
	"yes" => \$confirmed,
	"assume-yes" => \$confirmed,

	"V" => \&display_version,
	"version" => \&display_version,

	"h" => \&display_help,
	"help" => \&display_help,
) or
	die "error in command line arguments";

die "Opration required" if !@ARGV;

my $command = shift @ARGV;

if ($command =~ /^(install|remove)$/) {
	die "Package names required" if !@ARGV;
} elsif ($command =~ /^(dist-upgrade)$/) {
	;
} elsif ($command =~ /^(mark)$/) {
	exec 'apt-mark', @ARGV;
} elsif ($command =~ /^(search|show|showpkg|policy|depends|whatdepends)$/) {
	exec 'apt-cache', $command, @ARGV;
} else {
	exec 'apt-get', $command, @ARGV;
}

die "Unknown download method: $download_method" unless $download_method =~ /^(curl|libcurl)$/;
say "Download method: $download_method" if $verbose;

$_config->init();
$apt_dir_archives = $_config->get("Dir::Cache::archives/d");
$apt_dir_downloads = "$apt_dir_archives/downloads";

if (! mkdir $apt_dir_downloads) {
	die "Unable to create downloads directory: $!" unless $!{EEXIST};
}

open my $dwn, "<", $apt_dir_downloads or
	die "Unable to open downloads directory: $!";

if (! flock $dwn, LOCK_EX|LOCK_NB) {
	say "Another process is already using downloads.";
	exit;
}

ioctl STDOUT, &TIOCGWINSZ, $winsize or die "ioctl(TIOCGWINSZ): $!";
my ($rows, $cols, $xpixel, $ypixel) = unpack 'S4', $winsize;

$Text::Wrap::columns = $cols || 72;

my %info = (
	'extra-list'     => [],
	'install-list'   => [],
	'remove-list'    => [],
	'upgrade-list'   => [],
	'downgrade-list' => [],
	'keep-list'      => [],
	'hold-list'      => [],
	'essential-list' => [],
	'disk-size'      => "0B",
	'install'        => 0,
	'remove'         => 0,
	'upgrade'        => 0,
	'replace'        => 0,
	're-install'     => 0,
	'downgrade'      => 0,
	'total-size'     => 0,
	'missing-files'  => {},
);

say "Calculating changes...";

open my $fh, "-|", "apt-get", $command, "-o", "simple-output=yes", "-q=2", "--print-uris", @ARGV or
	die "Can't start apt-get: $!";

my $i = 0;
while (<$fh>) {
	SWITCH: {
		if (/^apt-get:((?:extra|install|remove|upgrade|downgrade|keep|hold|essential)-list):(.*)$/) {
			push @{$info{$1}}, split /\s+/, $2;
			last SWITCH;
		}
		if (/^apt-get:status:(install|remove|upgrade|replace|re-install|downgrade):(\d+)$/) {
			$info{$1} = $2;
			last SWITCH;
		}
		if (/^apt-get:status:(disk-size):(.*)$/) {
			$info{$1} = $2;
			last SWITCH;
		}

		next unless /^'(?<url>[^']+)' (?<name>\S+) (?<size>\d+) (?<hash>[A-Fa-f0-9]+)$/;

		last SWITCH if $+{'url'} =~ /^file:/;
		$+{'url'} =~ s/^copy:/file:/;

		$info{'missing-files'}->{$i} = {
			'url'  => $+{'url'},
			'name' => $+{'name'},
			'size' => $+{'size'},
			'hash' => $+{'hash'}
		};
		$i++;

		$info{'total-size'} += $+{'size'};
	}
}
close $fh;

my $everything = 0;
foreach my $key (qw/ upgrade downgrade install re-install replace remove /) {
	$everything += $info{$key};
}

if ($everything == 0) {
	say "Nothing to do.";
	exit;
}

display_lists \%info;
display_summary \%info;
confirmation;

my $n = keys %{$info{'missing-files'}};

if ($n > 0) {
	say "";

	say "Downloading $n packages...";
	download $info{'missing-files'};

	say "Validating checksums...";
	checksums $info{'missing-files'};
}

say "Applying changes...";
exec_apt_get $command, "-y", "-o", "simple-output=yes", @ARGV;
